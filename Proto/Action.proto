syntax = "proto3";

import "google/protobuf/struct.proto";

package aki;

// Action类型
enum EAction {
    Activate = 0;
    CallByCondition = 1;
    CallFunction = 2;
    ChangeActorState = 3;
    ChangeBehaviorState = 4;
    ChangeRandomState = 5;
    ChangeState = 6;
    Destroy = 7;
    DestroyAllChild = 8;
    DoCalculate = 9;
    FaceToPos = 10;
    FinishState = 11;
    FinishTalk = 12;
    Invoke = 13;
    JumpTalk = 14;
    Log = 15;
    MoveToPos = 16;
    PlayCustomSequence = 17;
    PlaySequenceData = 18;
    SetBehaviorIsPaused = 19;
    SetCameraMode = 20;
    SetFlowBoolOption = 21;
    SetHeadIconVisible = 22;
    SetMoveSpeed = 23;
    SetNumberVar = 24;
    SetPlotMode = 25;
    SetPos = 26;
    ShowCenterText = 27;
    ShowMessage = 28;
    ShowOption = 29;
    ShowTalk = 30;
    SimpleMove = 31;
    SpawnChild = 32;
    SyncVarToActorState = 33;
    Wait = 34;
}

message IActionInfo {
    // EAction中定义的枚举名字
    string Name = 1;
    bool Async = 2;
    optional google.protobuf.Struct Params = 3;
}

message IInvoke {
    uint32 Who = 1;
    IActionInfo ActionInfo = 2;
}

message IInteract {
    uint32 Who = 1;
    string Param = 2;
}

message ITriggerActions {
    repeated IActionInfo Actions = 1;
}

message IStateInfo {
    uint32 Id = 1;
    string Name = 2;
    repeated IActionInfo Actions = 3;
}

message IFlowInfo {
    uint32 Id = 1;
    string Name = 2;
    repeated IStateInfo States = 3;
}

message IPlayFlow {
    string FlowListName = 1;
    uint32 FlowId = 2;
    uint32 StateId = 3;
}

message ITextConfig {
    string Text = 1;
    string Sound = 2;
}

message IFlowListInfo {
    map<uint32, ITextConfig> Texts = 1;
    repeated IFlowInfo Flows = 2;
}

enum ELogLevel {
    Info = 0;
    Warn = 1;
    Error = 2;
}

message ILog {
    ELogLevel Level = 1;
    string Content = 2;
}

message IShowMessage {
    string Content = 1;
}

message IJumpTalk {
    uint32 TalkId = 1;
}

message ISetHeadIconVisible {
    uint32 WhoId = 1;
    bool Visible = 2;
}

message ITalkOption {
    uint32 TextId = 1;
    repeated IActionInfo Actions = 2;
}

message ITalkItem {
    uint32 Id = 1;
    string Name = 2;
    uint32 WhoId = 3;
    uint32 TextId = 4;
    optional uint32 WaitTime = 5;
    repeated IActionInfo Actions = 6;
    repeated ITalkOption Options = 7;
}

message IShowTalk {
    bool ResetCamera = 1;
    repeated ITalkItem TalkItems = 2;
}

message IShowOption {
    uint32 TextId = 1;
}

message IChangeState {
    uint32 StateId = 1;
}

message IChangeBehaviorState {
    uint32 StateId = 1;
    bool IsInstant = 2;
}

message ISetBehaviorPaused {
    bool IsPaused = 1;
}

message IChangeRandomState {
    repeated uint32 StateIds = 1;
}

// Flow控制选项
enum EFlowBoolOption {
    DisableInput = 0; // 是否禁止输入
    DisableViewControl = 1; // 是否禁止视角控制
    HideUi = 2; // 是否隐藏其它UI
    CanSkip = 3; // 是否可以跳过
    CanInteractive = 4; // 是否可以交互
}

// 设定Flow的控制选项
message ISetFlowBoolOption {
    EFlowBoolOption Option = 1;
    bool Value = 2;
}

// 相机模式
enum ECameraMode {
    Drama = 0; // 剧情相机
    Follow = 1; // 跟随
    FollowDrama = 2; // 跟随相机剧情模式
}

// 设定相机模式
message ISetCameraMode {
    ECameraMode Mode = 1;
}

// 剧情模式
enum EPlotMode {
    LevelA = 0; // A级演出
    LevelB = 1; // B级演出
    LevelC = 2; // C级演出
    LevelD = 3; // D级演出
}

// 设定剧情模式
message ISetPlotMode {
    EPlotMode Mode = 1;
}

message IPlaySequenceData {
    string Path = 1;
}

// 播放自定义Sequence,CustomSeqId对应[自定义序列]配表中的配置
message IPlayCustomSequence {
    uint32 CustomSeqId = 1;
    repeated uint32 WhoIds = 2;
}

// 等待一段时间
message IWait {
    optional float Min = 1;
    float Time = 2;
}

// 绑定镜头的类型
enum ECameraBindMode {
    One = 0; // 1角色
    Two = 1; // 2角色
    Three = 2; // 3角色
    None = 3; // 无
}

// export type TCameraBindMode = keyof typeof cameraBindModeConfig;

message IShowCenterText {
    uint32 TextId = 1;
}

message IVectorInfo {
    optional float X = 1;
    optional float Y = 2;
    optional float Z = 3;
}

message IPosA {
    optional float X = 1;
    optional float Y = 2;
    optional float Z = 3;
    optional float A = 4;
}

message IMoveToPosA {
    float Timeout = 1;
    IPosA Pos = 2;
}

message ISetMoveSpeed {
    float Speed = 1;
}

message ISetPosA {
    IPosA Pos = 1;
}

message IFaceToPos {
    IVectorInfo Pos = 1;
}

message ITransform {
    IVectorInfo Pos = 1;
    optional IVectorInfo Rot = 2;
    optional IVectorInfo Scale = 3;
}

message ISpawn {
    uint32 TemplateGuid = 1;
    ITransform Transform = 2;
}

message ISimpleMove {
    uint32 Who = 1;
    float UseTime = 2;
    IVectorInfo Pos = 3;
}

enum EActorState {
    Idle = 0; // 待机
    Open = 1; // 打开
    Close = 2; // 关闭
}

message IChangeActorState {
    EActorState State = 1;
}

message TVar {
    oneof Value {
        int32 intValue = 1;         // number
        string stringValue = 2;     // string
    }
}

message INumberVar {
    string Name = 1;
    int32 Value = 2;
}

message ISetNumberVar {
    string Name = 1;
    TVar Value = 2;
}

message ISyncVarToActorState {
    string VarName = 1;
    string StateKey = 2;
}

enum ECalOp {
    Add = 0; // +
    Sub = 1; // -
    Mut = 2; // *
    Div = 3; // /
}

message IDoCalculate {
    TVar Var1 = 1;
    ECalOp Op = 2;
    TVar Var2 = 3;
    string Result = 4;
}

enum ECompare {
    Ge = 0; // >=
    Gt = 1; // >
    Le = 2; // <=
    Lt = 3; // <
    Eq = 4; // ==
    Ne = 5; // !=
}

message ICondition {
    TVar Var1 = 1;
    TVar Var2 = 2;
    ECompare Compare = 3;
}

enum ELogicOpType {
    And = 0; // 与
    Or = 1; // 或
}

message IConditions {
    ELogicOpType LogicOpType = 1;
    repeated ICondition Conditions = 2;
}

message ICallByCondition {
    IConditions Conditions = 1;
    repeated IActionInfo TrueActions = 2;
    repeated IActionInfo FalseActions = 3;
}

message IFunction {
    string Name = 1;
    repeated IActionInfo Actions = 2;
}

message ICallFunction {
    string Name = 1;
}
